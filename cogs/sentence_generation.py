import discord
from discord.ext import commands
import random

from cogs.loops import Loops
from cogs.lists import Lists

class SentenceGeneration(commands.Cog):

    def __init__(SentenceGeneration, client):
        SentenceGeneration.client = client

    nouns = ["people","history","way","art","world","information","map","two","family","government","health","system","computer","meat","year","thanks","music","person","reading","method","data","food","understanding","theory","law","bird","literature","problem","software","control","knowledge","power","ability","economics","love","internet","television","science","library","nature","fact","product","idea","temperature","investment","area","society","activity","story","industry","media","thing","oven","community","definition","safety","quality","development","language","management","player","variety","video","week","security","country","exam","movie","organization","equipment","physics","analysis","policy","series","thought","basis","boyfriend","direction","strategy","technology","army","camera","freedom","paper","environment","child","instance","month","truth","marketing","university","writing","article","department","difference","goal","news","audience","fishing","growth","income","marriage","user","combination","failure","meaning","medicine","philosophy","teacher","communication","night","chemistry","disease","disk","energy","nation","road","role","soup","advertising","location","success","addition","apartment","education","math","moment","painting","politics","attention","decision","event","property","shopping","student","wood","competition","distribution","entertainment","office","population","president","unit","category","cigarette","context","introduction","opportunity","performance","driver","flight","length","magazine","newspaper","relationship","teaching","cell","dealer","finding","lake","member","message","phone","scene","appearance","association","concept","customer","death","discussion","housing","inflation","insurance","mood","woman","advice","blood","effort","expression","importance","opinion","payment","reality","responsibility","situation","skill","statement","wealth","application","city","county","depth","estate","foundation","grandmother","heart","perspective","photo","recipe","studio","topic","collection","depression","imagination","passion","percentage","resource","setting","ad","agency","college","connection","criticism","debt","description","memory","patience","secretary","solution","administration","aspect","attitude","director","personality","psychology","recommendation","response","selection","storage","version","alcohol","argument","complaint","contract","emphasis","highway","loss","membership","possession","preparation","steak","union","agreement","cancer","currency","employment","engineering","entry","interaction","mixture","preference","region","republic","tradition","virus","actor","classroom","delivery","device","difficulty","drama","election","engine","football","guidance","hotel","owner","priority","protection","suggestion","tension","variation","anxiety","atmosphere","awareness","bath","bread","candidate","climate","comparison","confusion","construction","elevator","emotion","employee","employer","guest","height","leadership","mall","manager","operation","recording","sample","transportation","charity","cousin","disaster","editor","efficiency","excLists.itement","extent","feedback","guitar","homework","leader","mom","outcome","permission","presentation","promotion","reflection","refrigerator","resolution","revenue","session","singer","tennis","basket","bonus","cabinet","childhood","church","clothes","coffee","dinner","drawing","hair","hearing","initiative","judgment","lab","measurement","mode","mud","orange","poetry","police","possibility","procedure","queen","ratio","relation","restaurant","satisfaction","sector","signature","significance","song","tooth","town","vehicle","volume","wife","accident","airport","appointment","arrival","assumption","baseball","chapter","committee","conversation","database","enthusiasm","error","explanation","farmer","gate","girl","hall","historian","hospital","injury","instruction","maintenance","manufacturer","meal","perception","pie","poem","presence","proposal","reception","replacement","revolution","river","son","speech","tea","village","warning","winner","worker","writer","assistance","breath","buyer","chest","chocolate","conclusion","contribution","cookie","courage","dad","desk","drawer","establishment","examination","garbage","grocery","honey","impression","improvement","independence","insect","inspection","inspector","king","ladder","menu","penalty","piano","potato","profession","professor","quantity","reaction","requirement","salad","sister","supermarket","tongue","weakness","wedding","affair","ambition","analyst","apple","assignment","assistant","bathroom","bedroom","beer","birthday","celebration","championship","cheek","client","consequence","departure","diamond","dirt","ear","fortune","friendship","funeral","gene","girlfriend","hat","indication","intention","lady","midnight","negotiation","obligation","passenger","pizza","platform","poet","pollution","recognition","reputation","shirt","sir","speaker","stranger","surgery","sympathy","tale","throat","trainer","uncle","youth","time","work","film","water","money","example","while","business","study","game","life","form","air","day","place","number","part","field","fish","back","process","heat","hand","experience","job","book","end","point","type","home","economy","value","body","market","guide","interest","state","radio","course","company","price","size","card","list","mind","trade","line","care","group","risk","word","fat","force","key","light","training","name","school","top","amount","level","order","practice","research","sense","service","piece","web","boss","sport","fun","house","page","term","test","answer","sound","focus","matter","kind","soil","board","oil","picture","access","garden","range", "toasters"]
    adjectives = ['defiant','homeless','adorable','delightful','homely','quaint','adventurous','depressed','horrible','aggressive','determined','hungry','real','agreeable','different','hurt','relieved','alert','difficult','repulsive','alive','disgusted','ill','rich','amused','distinct','important','angry','disturbed','impossible','scary','annoyed','dizzy','inexpensive','SentenceGenerationish','annoying','doubtful','innocent','shiny','anxious','drab','inquisitive','shy','arrogant','dull','itchy','silly','ashamed','sleepy','attractive','eager','jealous','smiling','average','easy','jittery','smoggy','awful','elated','jolly','sore','elegant','joyous','sparkling','bad','embarrassed','splendid','beautiful','enchanting','kind','spotless','better','encouraging','stormy','bewildered','energetic','lazy','strange','black','enthusiastic','light','stupid','bloody','envious','lively','successful','blue','evil','lonely','super','blueeyed','excited','long','blushing','expensive','lovely','talented','bored','exuberant','lucky','tame','brainy','tender','brave','fair','magnificent','tense','breakable','faithful','misty','terrible','bright','famous','modern','tasty','busy','fancy','motionless','thankful','fantastic','muddy','thoughtful','calm','fierce','mushy','thoughtless','careful','filthy','mysterious','tired','cautious','fine','tough','charming','foolish','nasty','troubled','cheerful','fragile','naughty','clean','frail','nervous','ugliest','clear','frantic','nice','ugly','clever','friendly','nutty','uninterested','cloudy','frightened','unsightly','clumsy','funny','obedient','unusual','colorful','obnoxious','upset','combative','gentle','odd','uptight','comfortable','gifted','oldfashioned','concerned','glamorous','open','vast','condemned','gleaming','outrageous','victorious','confused','glorious','outstanding','vivacious','cooperative','good','courageous','gorgeous','panicky','wandering','crazy','graceful','perfect','weary','creepy','grieving','plain','wicked','crowded','grotesque','pleasant','wideeyed','cruel','grumpy','poised','wild','curious','poor','witty','cute','handsome','powerful','worrisome','happy','precious','worried','dangerous','healthy','prickly','wrong','dark','helpful','proud','dead','helpless','putrid','zany','defeated','hilarious','puzzled','zealous', "attractive","bald","beautiful","chubby","clean","dazzling","drab","elegant","fancy","fit","flabby","glamorous","gorgeous","handsome","long","magnificent","muscular","plain","plump","quaint","scruffy","shapely","short","skinny","stocky","ugly","unkempt","unsightly", "toast"]
    verbs = ["accept", "accuse", "achieve", "acknowledge", "acquire", "adapt", "add", "adjust", "admire", "admit", "adopt", "adore", "advise", "afford", "agree", "aim", "allow", "announce", "anticipate", "apologize", "appear", "apply", "appreciate", "approach", "approve", "argue", "arise", "arrange", "arrive", "ask", "assume", "assure", "astonish", "attach", "attempt", "attend", "attract", "avoid", "awake", "bake", "bathe", "be", "bear", "beat", "become", "beg", "begin", "behave", "believe", "belong", "bend", "bet", "bind", "bite", "blow", "boil", "borrow", "bounce", "bow", "break", "breed", "bring", "broadcast", "build", "burn", "burst", "buy", "calculate", "can/could", "care", "carry", "catch", "celebrate", "change", "choose", "chop", "claim", "climb", "cling", "come", "commit", "communicate", "compare", "compete", "complain", "complete", "concern", "confirm", "consent", "consider", "consist", "consult", "contain", "continue", "convince", "cook", "cost", "count", "crawl", "create", "creep", "criticize", "cry", "cut", "dance", "dare", "deal", "decide", "defer", "delay", "deliver", "demand", "deny", "depend", "describe", "deserve", "desire", "destroy", "determine", "develop", "differ", "disagree", "discover", "discuss", "dislike", "distribute", "dive", "do", "doubt", "drag", "dream", "drill", "drink", "drive", "drop", "dry", "earn", "eat", "emphasize", "enable", "encourage", "engage", "enhance", "enjoy", "ensure", "entail", "enter", "establish", "examine", "exist", "expand", "expect", "experiment", "explain", "xplain everything.", "explore", "extend", "fail", "fall", "feed", "feel", "fight", "find", "finish", "fit", "fly", "fold", "follow", "forbid", "forget", "forgive", "freeze", "fry", "generate", "get", "give", "go", "grind", "grow", "hang", "happen", "hate", "have", "hear", "hesitate", "hide", "hit", "hold", "hop", "hope", "hug", "hurry", "hurt", "identify", "ignore", "illustrate", "imagine", "imply", "impress", "improve", "include", "incorporate", "indicate", "inform", "insist", "install", "intend", "introduce", "invest", "investigate", "involve", "iron", "jog", "jump", "justify", "keep", "kick", "kiss", "kneel", "knit", "know", "lack", "laugh", "lay", "lead", "lean", "leap", "learn", "leave", "lend", "lie (in bed)", "lift", "light", "lie (not to tell the truth)", "like", "listen", "look", "lose", "love", "maintain", "make", "manage", "matter", "may", "mean", "measure", "meet", "melt", "mention", "might", "mind", "miss", "mix", "mow", "must", "need", "neglect", "negotiate", "observe", "obtain", "occur", "offer", "open", "operate", "order", "organize", "ought to", "overcome", "overtake", "owe", "own", "paint", "participate", "pay", "peel", "perform", "persuade", "pinch", "plan", "play", "point", "possess", "postpone", "pour", "practice", "prefer", "prepare", "pretend", "prevent", "proceed", "promise", "propose", "protect", "prove", "pull", "punch", "pursue", "push", "put", "qualify", "quit", "react", "read", "realize", "recall", "receive", "recollect", "recommend", "reduce", "refer", "reflect", "refuse", "regret", "relate", "relax", "relieve", "rely", "remain", "remember", "remind", "repair", "replace", "represent", "require", "resent", "resist", "retain", "retire", "rid", "ride", "ring", "rise", "risk", "roast", "run", "sanction", "satisfy", "say", "scrub", "see", "seem", "sell", "send", "serve", "set", "settle", "sew", "shake", "shall", "shed", "shine", "shoot", "should", "show", "shrink", "shut", "sing", "sink", "sit", "ski", "sleep", "slice", "slide", "slip", "smell", "snore", "solve", "sow", "speak", "specify", "spell", "spend", "spill", "spit", "spread", "squat", "stack", "stand", "start", "steal", "stick", "sting", "stink", "stir", "stop", "stretch", "strike", "struggle", "study", "submit", "succeed", "suffer", "suggest", "supply", "suppose", "surprise", "survive", "swear", "sweep", "swell", "swim", "swing", "take", "talk", "taste", "teach", "tear", "tell", "tend", "think", "threaten", "throw", "tiptoe", "tolerate", "translate", "understand", "vacuum", "value", "vary", "volunteer", "wait", "wake", "walk", "want", "warn", "wash", "watch", "wave", "wear", "weep", "weigh", "whip", "will", "win", "wish", "would", "write", "list of SentenceGeneration.verbs in english grammar", "useful list of SentenceGeneration.verbs classified by their grammatical functions.", "know", "believe", "understand", "doubt", "think (have an opinion)", "suppose", "recognise", "forget", "remember", "imagine", "mean", "agree", "disagree", "deny", "promise", "satisfy", "realise", "appear", "astonish", "please", "impress", "surprise", "concern", "possession", "have", "own", "possess", "lack", "consist", "involve", "include", "contain", "emotions", "love", "like", "dislike", "hate", "adore", "prefer", "care for", "mind", "want", "need", "desire", "wish", "hope", "appreciate", "value", "measure, cost, others", "cost", "measure", "weigh", "owe", "seem", "fit", "depend", "matter", "mario", "toast","astSimple	PastParticiple", "arose", "babysa", "/were", "beat	", "became", "bent	", "began", "bet", "bound", "bit	bi", "bled	", "blew	", "broke", "bred	", "brough", "t	brroadcast", "built", "ht	bo", "caught", "chose", "came	", "cost	", "cut", "dealt", "dug", "done", "drew", "drank", "drove", "eaten", "fell", "fedfe", "felt", "fought", "found", "fl", "forbadn", "forgotn", "forgav", "froze", "got(B", "AmE)", "gave", "grew", "hung", "had", "heard", "hid", "hit", "held", "hurt", "kept", "knew", "led", "left", "lent", "let", "lay", "lit", "lost", "made", "meant", "met", "put", "quit", "rode", "rang", "rose", "run", "seen", "sold", "sent", "set", "shook", "shone", "shot", "showed", "shut", "sang", "sank", "sat", "slept", "slid", "spoke", "sped", "spent", "spun", "spread", "stood", "stole", "stuck", "stung", "struck", "swore", "swept", "swam", "swung", "took", "taught", "tore", "told", "though", "threw", "ndununderstood", "woke", "wore", "won", "wiwithdrawn", "wrote", "went", "came", "left", "did", "is", "exists", "is", "is", "is", "is", "is", "is", "is", "is", "is", "isn't", "isn't", "isn't", "isn't", "isn't", "is not", "was", "could be", "might be", "possibly is", "created", "made", "went", "camed", "traveled", "fought", "fights", "drew", "draws", "the", "yes'nt", "wasn't", "wasn't", "couldn't be", "cleared", "selected", "converted", "removed", "reversed", "randomized", "added", "sorted", "filtered", "counts", "counted", "filters", "filled", "fills", "won't", "crafts", "is mining away", "was mining away", "doesn't know what to mine", "toasts toast", "learns", "teaches", "learned", "teach", "tears", "repeats", "repeated"]
    determiners = ["This","This","This","This", "Those","Those", "The","The","The", "One", "A", "Each", "Some", "Every", "All", "First", "Some", "Many", "Every", "All", "First", "Some", "Many","One", "Two", "Three", "Ten", "One thousand", "One hundered thousand", "One million", "Ten million", "One hundered million", "One billion", "Ten billion", "One hundered billion", "One trillion", "Ten trillion", "One hundered trillion", "Half", "My", "His", "Our", "Its", "Their", "Her","My", "His", "Our", "Its", "Their", "Her","My", "His", "Our", "Its", "Their", "Her", "The last", "The first", "The second", "The previous", "A few", "Several", "Enough", "More than enough"]
    question_determiners = ["Will", "When will", "Could", "Does", "Can", "Is it possible for", "Is"]
    prepositions = ["aboard","about","above","across","after","against","along","amid","among","anti","around","as","at","before","behind","below","beneath","beside","besides","between","beyond","but","by","concerning","considering","despite","down","during","except","excepting","excluding","following","for","from","in","inside","into","like","minus","near","of","off","on","onto","opposite","outside","over","past","per","plus","regarding","round","save","since","than","through","to","toward","towards","under","underneath","unlike","until","up","upon","versus","via","with","within","without","because","because","because",]
    punctuation = [".",".",".","!","?","!","?","\\","..."]


    demfex_nouns = ["bbbbbbbbbbbb", "eon", "Web", "boot logo", "door","RAndom people","Login","VPN Valut", "ID","Cloud","Mc","file","new","Wikipedia","Drive","Web","school","Elevator","Nitro","email","password","lang","users","Music","apk","IP","IPv4","IPv6","hack","authentication","Url","QR","server","delete","Apple Store7542","virus","link","texture","Achievement","Dry","Final","Laptop","temp","DDOS","PC","SSD","HDD","deatg5","html","logo","aaaaaaaaaaa","R.I.P.","iPhonr8","region image","image","Tablet","Tablet"]
    demfex_verbs = ["make", "upload", "touch", "hack", "crash", "press", "buy", "find", "add", "sign in"]
    demfex_verbs_command = ["pls upload","pls make","pls hack","pls crash","pls buy","pls find","pls add", "pls sign in"]
    demfex_verbs_command2 = ["upload pls","make pls","hack pls","crash pls","buy pls","find pls","add pls", "sign in pls"]
    demfex_verbs_past_tense = ["made","uploaded", "angry and killed","hacked","crashed", "runned", "pressed","buyed","found","added","sign ined"]
    demfex_verbs_ongoing_present_tense = ["making","uploading","hacking","crashing","pressing","isbuying","finding","adding","siging in"]
    demfex_idk = ["why","yay","lol","ok", "Great", "Good", "Good?"]
    demfex_endings = [" "," ","?"," aaaaaaaaaaaaaaaaaaaaaa", " ", " ", "...", " ", " ", "...", "?", " ", " ", "?", " ", " "]



    def generate_demfex_quote(self):
        sentence_type = random.randint(1, 10)

        if sentence_type == 1:
            sentence = random.choice(SentenceGeneration.demfex_verbs_command) + " " + random.choice(SentenceGeneration.demfex_nouns)  + random.choice(SentenceGeneration.demfex_endings)

        elif sentence_type == 1:
            sentence = random.choice(SentenceGeneration.demfex_verbs_command) + " " + random.choice(SentenceGeneration.demfex_nouns)  + " " + random.choice(SentenceGeneration.demfex_nouns) + random.choice(SentenceGeneration.demfex_endings)

        elif sentence_type == 2:
            sentence = random.choice(SentenceGeneration.demfex_nouns) + " " + random.choice(SentenceGeneration.demfex_verbs_command2) + random.choice(SentenceGeneration.demfex_endings)

        elif sentence_type == 3:
            sentence = random.choice(SentenceGeneration.demfex_nouns) + " " + random.choice(SentenceGeneration.demfex_nouns) + " " + random.choice(SentenceGeneration.demfex_verbs_command2) + random.choice(SentenceGeneration.demfex_endings)

        elif sentence_type == 4:
            sentence = random.choice(SentenceGeneration.demfex_nouns) + " " + random.choice(SentenceGeneration.demfex_verbs_past_tense) + random.choice(SentenceGeneration.demfex_endings)

        elif sentence_type == 5:
            sentence = random.choice(SentenceGeneration.demfex_nouns) + " " + random.choice(SentenceGeneration.demfex_nouns) + " " + random.choice(SentenceGeneration.demfex_verbs_past_tense) + random.choice(SentenceGeneration.demfex_endings)

        elif sentence_type == 6:
            sentence = random.choice(SentenceGeneration.demfex_verbs_ongoing_present_tense) + " " + random.choice(SentenceGeneration.demfex_nouns) + random.choice(SentenceGeneration.demfex_endings)

        elif sentence_type == 7:
            sentence = random.choice(SentenceGeneration.demfex_verbs_ongoing_present_tense) + " " + random.choice(SentenceGeneration.demfex_nouns) + " " + random.choice(SentenceGeneration.demfex_nouns) + random.choice(SentenceGeneration.demfex_endings)

        elif sentence_type == 8:
            sentence = random.choice(SentenceGeneration.demfex_idk) + " " + random.choice(SentenceGeneration.demfex_nouns) + " " + random.choice(SentenceGeneration.demfex_verbs_past_tense) + random.choice(SentenceGeneration.demfex_endings)

        elif sentence_type == 9:
            sentence = random.choice(SentenceGeneration.demfex_nouns) + " " + random.choice(SentenceGeneration.demfex_verbs) + " to " + random.choice(SentenceGeneration.demfex_nouns) + random.choice(SentenceGeneration.demfex_endings)

        elif sentence_type == 10:
            sentence = random.choice(SentenceGeneration.demfex_nouns) + " " + random.choice(SentenceGeneration.demfex_nouns) + " = " + random.choice(SentenceGeneration.demfex_idk) + random.choice(SentenceGeneration.demfex_endings)



        return sentence

    def generate_sentence(self):
        sentence_type = random.randint(0, 9)

        if sentence_type == 0 or sentence_type == 1:
            sentence = random.choice(SentenceGeneration.determiners) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + random.choice(SentenceGeneration.punctuation)

        elif sentence_type == 2:
            sentence = random.choice(SentenceGeneration.determiners) + " " + random.choice(Lists.item) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(Lists.item) + random.choice(SentenceGeneration.punctuation)

        elif sentence_type == 3:
            sentence = random.choice(SentenceGeneration.question_determiners) + " " + random.choice(SentenceGeneration.determiners).lower() + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + "?"

        elif sentence_type == 4:
            sentence = random.choice(SentenceGeneration.determiners) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + random.choice(SentenceGeneration.punctuation)

        elif sentence_type == 5:
            sentence = random.choice(SentenceGeneration.determiners) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + random.choice(SentenceGeneration.punctuation)

        elif sentence_type == 6:
            sentence = random.choice(SentenceGeneration.determiners) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + random.choice(SentenceGeneration.punctuation)

        elif sentence_type == 7:
            sentence = random.choice(SentenceGeneration.determiners) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + random.choice(SentenceGeneration.punctuation)

        elif sentence_type == 8:
            sentence = random.choice(SentenceGeneration.determiners) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + random.choice(SentenceGeneration.punctuation)

        elif sentence_type == 9:
            sentence = random.choice(SentenceGeneration.determiners) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.prepositions)+ " " + random.choice(SentenceGeneration.nouns) + " " + random.choice(SentenceGeneration.verbs) + " " + random.choice(SentenceGeneration.nouns) + random.choice(SentenceGeneration.punctuation)


        return sentence





def setup(client):
    client.add_cog(SentenceGeneration(client))